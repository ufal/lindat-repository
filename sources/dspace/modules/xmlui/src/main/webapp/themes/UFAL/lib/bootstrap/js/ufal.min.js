/*global jQuery */
/*jshint globalstrict: true*/
'use strict';

jQuery.fn.exists = function() {
	return this.length !== 0;
}

var ufal = ufal || {};
var console = window.console || {
	log : function() {
	}
};

jQuery(document)
		.ready(
				function() {
					ufal.click_event = ufal.click_event || jQuery.fn.tap ? "tap"
							: "click";
					jQuery(
							"#aspect_eperson_LoginChooser_list_login-options .signon")
							.click();
					
					var downloadLink = ufal.utils.getQueryParameter("download");
					if(downloadLink!=null) {
						window.location = decodeURIComponent(downloadLink);
					}

					ufal.utils.handle_side_menu();
					ufal.utils.initialize_layer_slider();
					ufal.utils.handle_broken_images();
					ufal.utils.handle_static_pages_js();
					ufal.utils.basic_functions();
					ufal.utils.handle_modals();
					ufal.utils.convert_codes();

					ufal.submissions.handle_submission_js();
					ufal.submissions.autocomplete();

					ufal.search.handle_filters();

					ufal.browse.handle_date_input();

					ufal.submissions.handle_files();

					jQuery("[data-toggle='tooltip']").tooltip();

					// I agree button in license agreement should be large
					jQuery(
							"#cz_cuni_mff_ufal_UFALLicenceAgreement_field_confirm_license")
							.addClass("btn btn-large btn-block");

					jQuery('.linkify').each(function(index) {
						ufal.utils.linkify(this);
					});
				});

//
//
//

ufal.utils = {

	handle_side_menu : function() {

		jQuery("#showhidemenu").on(ufal.click_event, function() {
			jQuery("#main-contents").toggleClass("hidden-xs");
			jQuery("#options-menu").toggleClass("hidden-xs");
			jQuery(".jumbotron").toggleClass("hidden-xs");
		});

		jQuery("#menu-toggler").on(ufal.click_event, function() {
			jQuery("#sidebar").toggleClass("display");
			jQuery(this).toggleClass("display");
			return false;
		});
		var b = jQuery("#sidebar").hasClass("menu-min");
		jQuery("#sidebar-collapse").on(
				ufal.click_event,
				function() {
					jQuery("#sidebar").toggleClass("menu-min");
					jQuery(this).find('[class*="icon-"]:eq(0)').toggleClass(
							"icon-double-angle-right");
					b = jQuery("#sidebar").hasClass("menu-min");
					if (b) {
						jQuery(".open > .submenu").removeClass("open");
					}
				});
		var a = "ontouchend" in document;
		jQuery(".nav-list")
				.on(
						ufal.click_event,
						function(g) {
							var f = jQuery(g.target).closest("a");
							if (!f || f.length === 0) {
								return;
							}
							if (!f.hasClass("dropdown-toggle")) {
								if (b
										&& ufal.click_event === "tap"
										&& f.get(0).parentNode.parentNode === this) {
									var h = f.find(".menu-text").get(0);
									if (g.target !== h
											&& !jQuery.contains(h, g.target)) {
										return false;
									}
								}
								return;
							}
							var d = f.next().get(0);
							if (!jQuery(d).is(":visible")) {
								var c = jQuery(d.parentNode).closest("ul");
								if (b && c.hasClass("nav-list")) {
									return;
								}
								c
										.find("> .open > .submenu")
										.each(
												function() {
													if (this !== d
															&& !jQuery(
																	this.parentNode)
																	.hasClass(
																			"active")) {
														jQuery(this).slideUp(
																200).parent()
																.removeClass(
																		"open");
													}
												});
							}
							if (b
									&& jQuery(d.parentNode.parentNode)
											.hasClass("nav-list")) {
								return false;
							}
							jQuery(d).slideToggle(200).parent().toggleClass(
									"open");
							return false;
						});
	},

	initialize_layer_slider : function() {
		if (jQuery('#layerslider').length > 0) {
			jQuery(".carousel").carousel();
			jQuery(".home-search").focus();
		}
	},

	extract_metadata : function(xml_content) {
		return xml_content;
	},

	extract_metadata_bibtex : function(xml_content) {
		try {
			var xml = jQuery.parseXML(xml_content);
			var metadata = jQuery(xml.getElementsByTagNameNS(
					"http://lindat.mff.cuni.cz/ns/experimental/bibtex",
					"bibtex")[0]);
			if (!metadata.exists()) {
				throw "Not found."
			}
			return metadata.text();
		} catch (err) {
			return xml_content;
		}
	},

	extract_metadata_cmdi : function(xml_content) {
		return xml_content;
	},

	handle_broken_images : function() {
		jQuery("img[alt!='Icon']").error(function() {
			jQuery(this).css("display", "none");
		});
	},

	handle_static_pages_js : function() {
		jQuery(".helpdesk-tolink").each(function() {
			jQuery(this).attr("href", jQuery(".helpdesk").attr("href"));
		});
	},

	handle_modals : function() {

		if (jQuery('#userbox').length > 0) { // user logged in
			jQuery("#download-all-button").css("visibility", "visible");
			jQuery("#download-all-button").css("display", "block");
		}

		jQuery('[data-toggle="modal"]')
				.click(
						function(e) {
							e.preventDefault();
							var url = jQuery(this).attr("href");
							var name = "extract_metadata_"
									+ jQuery(this).html().toLowerCase();
							jQuery("#exporter_model_div .modal-body").html("");
							jQuery("#exporter_model_div").modal('show');
							jQuery
									.ajax({
										url : url,
										context : document.body,
										dataType : 'text'
									})
									.done(
											function(data) {
												var jdata_html = data;
												jdata_html = ufal.utils[name]
														(jdata_html);
												jdata_html = jdata_html
														.replace(/>/g, "&gt;")
														.replace(/</g, "&lt;");
												jQuery(
														"#exporter_model_div .modal-body")
														.html(
																'<pre>'
																		+ jdata_html
																		+ '</pre>');
											})
									.fail(
											function(data) {
												var jdata_html = data;
												jdata_html = ufal.utils
														.extract_metadata(jdata_html.responseText);
												if (jdata_html != null) {
													jQuery(
															"#exporter_model_div .modal-body")
															.html(
																	'<pre>'
																			+ jdata_html
																			+ '</pre>');
												} else {
													jQuery(
															"#exporter_model_div .modal-body")
															.html(
																	'Failed to load requested data.');
												}
											});
						});
	},

	basic_functions : function() {
		//
		jQuery(".hide-parent").each(function() {
			ufal.utils.hide_parent(jQuery(this));
		});
	},

	hide_parent : function(obj) {
		obj.parent().hide();
	},

	linkify : function(obj) {
		var text = jQuery(obj).html();
		var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
		var emailexp = /([a-z0-9_+.%-]+@[a-z0-9.-]+\.[a-z]{2,6})/gi;
		text = text.replace(exp, "<a target='_blank' href='$1'>$1</a>")
				.replace(emailexp, "<a href='mailto:$1'>$1</a>");
		jQuery(obj).html(text);
	},

	ajax_json : function(url) {
		var data = {};
		jQuery.ajax({
			type : 'GET',
			url : url,
			dataType : 'json',
			success : function() {
			},
			data : {},
			async : false
		}).fail(function(jqXHR, textStatus) {
			console.log("ufal/utils failed to load data: " + textStatus);
		}).done(function(d) {
			data = d;
		});
		if (data == null) {
			console.log("ufal/utils failed to load data: did not get json");
		}
		return data;
	},

	swap_map : function(json) {
		var ret = {};
		for ( var key in json) {
			ret[json[key]] = key;
		}
		return ret;
	},

	get_dspace_url : function() {
		var url = document.URL.substr(0, document.URL.search('/xmlui/?'))
				+ '/xmlui/';
		return url;
	},

	convert_language_iso_codes : function() {
		var isoFieldsSelectors = '.language-iso-code, ' +
			'[name="dc_language_iso_selected"] + .ds-interpreted-field, ' +
			'#aspect_artifactbrowser_ConfigurableBrowse_table_browse-by-language-results tbody tr td a, ' +
			'#aspect_discovery_SearchFacetFilter_table_browse-by-language-results tbody tr td a, ' +
			'[href*="language_filter"] span.wordbreak, ' +
			'[href*="language_filter"] span strong.truncate';
		var numItems = jQuery(isoFieldsSelectors).length;
		if (numItems > 0) {
			var url = ufal.utils.get_dspace_url()
					+ 'static/json/iso_langs.json';
			var isoCodesMap = ufal.utils.swap_map(ufal.utils.ajax_json(url));
			jQuery(isoFieldsSelectors).each(function(i) {
				var value = jQuery(this).html();
				var groups = value.match(/^(\s*)(\w{3})(.*)$/);
				if(groups) {
					var isoCode = groups[2];
					if (isoCode in isoCodesMap) {
						value = groups[1] + isoCodesMap[isoCode] + groups[3];
					}
				}
				jQuery(this).html(value);
			});
		}
	},

	convert_codes : function() {
		ufal.utils.convert_language_iso_codes();
	},

	getQueryParameter : function(str) {		  
		  var queryParams = document.location.search.replace(/(^\?)/,'').split("&").map(function(n){return n = n.split("="),this[n[0]] = n[1],this}.bind({}))[0];
		  return queryParams[str];
	}
	
}

//
//
//

ufal.submissions = {

	handle_submission_js : function() {
		jQuery
				.each(
						jQuery("#aspect_submission_StepTransformer_list_submit-describe .thumbnail"),
						function() {
							jQuery(this)
									.on(
											"click",
											function() {
												jQuery(
														"#aspect_submission_StepTransformer_list_submit-describe .thumbnail")
														.attr("class",
																"thumbnail col-sm-3");
												jQuery(this)
														.attr("class",
																"thumbnail col-sm-3 alert-info");
											});
						});

		var type = jQuery("#aspect_submission_StepTransformer_field_dc_type")
				.val();
		if (type != null || type !== "") {
			jQuery("#type_" + type).attr("class",
					"thumbnail col-sm-3 alert-info");
		}

		jQuery("#aspect_submission_StepTransformer_field_dc_date_issued")
				.datepicker({
					autoclose : true,
					format : 'yyyy-mm-dd',
					forceParse : false
				});
	},

	handle_files : function() {
		if (jQuery("#replaced_by_alert").length > 0) {
			jQuery("#files_section").hide();
			jQuery("#replaced_by_alert")
					.append(
							'<span class="font_smaller" style="display: inline-block; margin-top: 1em;" id="show_files_info">Please refer to the submission above for the latest available data. If you nevertheless need the original data, please click <a href="#show-files" id="show_files_link">here</a>.</span>');
			jQuery("#show_files_link").on('click', function() {
				jQuery("#show_files_info").hide();
				jQuery("#files_section").show();
				jQuery('html, body').delay(100).animate({
					scrollTop : jQuery("#files_section").offset().top
				}, 200);
			});
		}
	},

	

	autocomplete_solr : function(obj, url, updater_function) {
		var values = {};
		var data = ufal.utils.ajax_json(url);
		if (data == null) {
			// Try checking the rewrite rule (described in local conf)
			return;
		}
		for ( var d in data.facet_counts.facet_fields) {
			// get the first property ...
			if (data.facet_counts.facet_fields.hasOwnProperty(d)) {
				data = data.facet_counts.facet_fields[d];
				break;
			}
		}
		if (data != null) {
			for ( var i = 0; i < data.length; i += 2) {
				values[data[i]] = data[i + 1];
			}
		} else {
			console
					.log("ufal/autocomplete failed to load data: did not get correct solr json");
		}

		obj.typeahead({
			source : Object.keys(values),
			sorter : function(items) {
				return items.sort(function(i1, i2) {
					return values[i2] - values[i1];
				});
			},
			highlighter : function(item) {
				return "<dl class='dl-horizontal'>"
						+ "<dd style='margin-left: 10px;'>" + item
						+ " <span class='font_smaller'>(used by #"
						+ values[item] + ")</span></dd>" + "</dl>";
			},
			updater : updater_function,
			items : 6
		});
	},

	handle_field_updater : function(item) {
		return 'http://hdl.handle.net/' + item;
	},

	autocomplete_solr_handle_field : function(obj, url) {
		ufal.submissions.autocomplete_solr(obj, url,
				ufal.submissions.handle_field_updater);
	},

	name_splitter : function(text) {
		var splits = [];
		if (text != null) {
			splits = text.split(/\s*,\s*/);
		}
		return splits;
	},

	name_field_updater : function(item) {
		var id = this.$element.attr('id');
		var base_id = id.replace(/_last$|_first$/, "");
		var selectors = [ "#" + base_id + "_last", "#" + base_id + "_first" ];
		var splits = ufal.submissions.name_splitter(item);
		var return_value = null;
		if (splits.length > 0) {
			for ( var i = 0; i < selectors.length; i++) {
				var selector = selectors[i];
				var value = "";
				if (i < splits.length) {
					value = splits[i];
				}
				var element = jQuery(selector);
				if (element != null) {
					if (element.attr('id') === id) {
						return_value = value;
					}
					element.val(value);
				}
			}
		}
		return return_value;
	},

	autocomplete_solr_name_field : function(obj, url) {
		ufal.submissions.autocomplete_solr(obj, url,
				ufal.submissions.name_field_updater);
	},

	single_field_updater : function(item) {
		return item;
	},

	autocomplete_solr_single_field : function(obj, url) {
		ufal.submissions.autocomplete_solr(obj, url,
				ufal.submissions.single_field_updater);
	},

	autocomplete_lang_codes : function(jobj, url) {
		var lang_pairs_iso = ufal.utils.ajax_json(url);
		jQuery("#aspect_submission_StepTransformer_field_dc_language_iso")
				.typeahead(
						{
							source : Object.keys(lang_pairs_iso),
							highlighter : function(item) {
								return "<dl class='dl-horizontal'>"
										+ "<dt style='width: 80px;'>ISO:</dt>"
										+ "<dd style='margin-left: 100px;'>"
										+ lang_pairs_iso[item]
										+ "</dd>"
										+ "<dt style='width: 80px;'>Language:</dt>"
										+ "<dd style='margin-left: 100px;'>"
										+ item + "</dd>" + "</dl>";
							},
							updater : function(item, scope) {
								return lang_pairs_iso[item];
							},
							items : 8
						}).blur(function() {
					var lang = jobj.val();
					for ( var p in lang_pairs_iso) {
						if (lang_pairs_iso[p] === lang) {
							return;
						}
					}
					jobj.val('');
				});
	},

	autocomplete_select_to_autocomplete : function(jobj) {

		var options = [];
		var id = jobj.attr('id');

		jobj.find("option").each(function() {
			options[jQuery(this).text()] = jQuery(this).val();
		});

		jobj.replaceWith('<input id="' + id + '-text" type="text" class="'
				+ jobj.attr('class') + '" name="' + jobj.attr('name')
				+ '-text" /> \
        				  <input id="' + id
				+ '" type="hidden" class="' + jobj.attr('class') + '" name="'
				+ jobj.attr('name') + '" />');

		var jobj = jQuery('#' + id + '-text');

		jobj.typeahead(
				{
					source : Object.keys(options),
					highlighter : function(item) {
						return "<dl class='dl-horizontal'>"
								+ "<dd style='margin-left: 10px;'>" + item
								+ "</dd>" + "</dl>";
					},
					updater : function(item, scope) {
						jQuery('#' + id).val(options[item]);
						return item;
					},
					items : 8
				}).blur(function() {
			var value = jobj.val();
			for ( var p in options) {
				if (p === value) {
					return;
				}
			}
			jobj.val('');
		});
	},

	autocomplete_select2 : function(jobj) {
		jobj.select2({
			placeholder : 'Please select value',
			allowClear : true
		});
	},

	autocomplete : function() {
		jQuery(".autocomplete")
				.each(
						function() {
							// two hidden inputs specify the url and the type
							var type = jQuery(
									"[name='" + jQuery(this).attr('name')
											+ "-type']").val();
							var type_splits = type.split("-");
							var basetype = type_splits[0];

							if (basetype === "select_to_autocomplete") {
								ufal.submissions
										.autocomplete_select_to_autocomplete(jQuery(this));
							} else if (basetype === "select2") {
								ufal.submissions
										.autocomplete_select2(jQuery(this));
							} else if (basetype === "solr"
									|| basetype === "json_static") {

								var subtype = "";
								if (type_splits.length >= 2) {
									subtype = type_splits[1];
								}

								var url = jQuery(
										"[name='" + jQuery(this).attr('name')
												+ "-url']").val()
										+ subtype;

								if (basetype == "json_static") {
									switch (subtype) {
									case "iso_langs.json":
										ufal.submissions
												.autocomplete_lang_codes(
														jQuery(this), url);
										break;
									default:
										console
												.log("ufal/autocomplete does not support type: "
														+ type);
										return;
									}
								} else if (basetype == "solr") {
									switch (subtype) {
									case "handle":
										ufal.submissions
												.autocomplete_solr_handle_field(
														jQuery(this), url);
										break;
									case "author_ac":
										ufal.submissions
												.autocomplete_solr_name_field(
														jQuery(this), url);
										break;
									default:
										ufal.submissions
												.autocomplete_solr_single_field(
														jQuery(this), url);
									}
								}
							} else {
								console
										.log("ufal/autocomplete does not support type: "
												+ type);
								return;
							}

							jQuery(this).attr('autocomplete', 'off');
						});
	}
};

ufal.search = {
	handle_filters : function() {
		jQuery(".selected-filter-close-icon")
				.click(
						function() {
							jQuery("[name='fq']", jQuery(this)).attr("checked",
									false);
							jQuery(
									"#aspect_discovery_SimpleSearch_field_submit_update_filters")
									.click();
						});

		jQuery(".selected-filter-clearall")
				.click(
						function() {
							jQuery(".selected-filter-close-icon *[name='fq']")
									.attr("checked", false);
							jQuery(
									"#aspect_discovery_SimpleSearch_field_submit_update_filters")
									.click();
						});

		jQuery("[name='submit']",
				jQuery("#aspect_discovery_SimpleSearch_div_general-query"))
				.click(
						function() {
							jQuery(
									"#aspect_discovery_SimpleSearch_field_filter")
									.val("");
						});

		jQuery("#aspect_discovery_SimpleSearch_field_operator").change(
				function() {
					var val = jQuery(this).val();
					if (val == "notavailable") {
						jQuery("#aspect_discovery_SimpleSearch_field_filter")
								.parent().addClass("hidden");
						jQuery("#aspect_discovery_SimpleSearch_field_filter")
								.val("[* TO *]");
					} else {
						jQuery("#aspect_discovery_SimpleSearch_field_filter")
								.parent().removeClass("hidden");
						jQuery("#aspect_discovery_SimpleSearch_field_filter")
								.val("");
					}
				});
	}
};

ufal.browse = {
	handle_date_input : function() {
		jQuery("#aspect_artifactbrowser_ConfigurableBrowse_field_month")
				.change(
						function() {
							jQuery(
									"#aspect_artifactbrowser_ConfigurableBrowse_field_starts_with")
									.val("");
						});
		jQuery("#aspect_artifactbrowser_ConfigurableBrowse_field_year")
				.change(
						function() {
							jQuery(
									"#aspect_artifactbrowser_ConfigurableBrowse_field_starts_with")
									.val("");
						});
		jQuery("#aspect_artifactbrowser_ConfigurableBrowse_field_starts_with")
				.on(
						'input',
						function() {
							if (jQuery(this).val() != "") {
								jQuery(
										"#aspect_artifactbrowser_ConfigurableBrowse_field_month")
										.val("-1");
								jQuery(
										"#aspect_artifactbrowser_ConfigurableBrowse_field_year")
										.val("-1");
							}
						});

	}
}


